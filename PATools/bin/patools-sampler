#!/usr/bin/env python
# 
# Copyright (C) 2017 - Massachusetts Institute of Technology (MIT) 
# 
# This program is free software: you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation, either version 3 of the License, or 
# (at your option) any later version. 
# 
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
# GNU General Public License for more details. 
# 
# You should have received a copy of the GNU General Public License 
# along with this program.  If not, see <http://www.gnu.org/licenses/>. 



import optparse
import ConfigParser
import logging
import os
import sys
try: 
    import Tkinter
    mpl_backend = "TkAgg"
except ImportError:
    mpl_backend = "Agg"
import matplotlib
matplotlib.use(mpl_backend)
from matplotlib import pyplot as plt
from matplotlib import gridspec
import numpy.random

DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(DIR, '..'))

import patools 
from patools.star import Fistar
from patools.astrometry import Anet, Starlist, Catalog
from patools.phot import Fiphot
from patools.util.configurable import Configuration
from patools.util.imagescale import zscale

def cmd_parse():
    p = optparse.OptionParser()
    p.add_option('--version', action="store_true", help="dislay the version ")
    p.add_option('--logfile', default='example.log', 
                 help='The destination of the log file, - outputs the logs to stdout')
    p.add_option('--config', '-c', dest="config_file", type=str, metavar="CONFIG_FILE", help='the filename of configuration file that contains '
                      'contains parameter settings(Optional)')
    p.add_option('--debug', action='store_true', help='output debug level message')
    p.add_option('--plot-to-file', action='store_true', help='output image to png files instead')
    options, arguments = p.parse_args()
    
    return [options, arguments]

def get_default_keys():

    return dict()

if __name__ == '__main__':
    usage = """%prog action [options]
    Actions: 
        fistar - source extraction for one frame.
        astrometry - solve for astrometry for one frame.
        fiphot - extract photometry for one frame.
    """

    options, args = cmd_parse()
       
    if options.version:
        print "patool version %s" % LCTools.__version__
        sys.exit(0)
    patools.setup_logging(debug=options.debug, filename=options.logfile)
    logger = logging.getLogger(__name__)
    cfg = Configuration(options.config_file)
    default_params_dict = get_default_keys()  
    #configue IO
    infile = cfg.get('Setup', default_params_dict).get('infile', '')           
    indir = cfg.get('Setup', default_params_dict).get('indir', '')
    logger.debug("infile=%s, indir=%s", infile, indir)
     
    outdir = cfg.get('Setup', default_params_dict).get('outdir', indir)

    if 'fistar' in args: 
        extractor = Fistar(cfg)
        extractor(indir+infile)
        from patools.util.dataio import readcolumn
        import numpy as np
        outfile = outdir+extractor.get_outfile(indir+infile)
        xcoords = []; readcolumn(xcoords, 2, outfile); xcoords=np.array(xcoords)
        ycoords = []; readcolumn(ycoords, 3, outfile); ycoords=np.array(ycoords)
        import astropy
        from astropy.io import fits
        with fits.open(indir+infile) as hdulist:
            fig = plt.figure(figsize=[20,20])
            nrow=3
            ncol=6
            gs = gridspec.GridSpec(nrow, ncol)
            ax1 = fig.add_subplot(gs[0:3, 0:3])
            if len(hdulist) == 3:
                data = hdulist[1].data
            if len(hdulist) == 1:
                data = hdulist[0].data

            vmin, vmax = zscale(data) 
            logger.debug("min=%f, max=%f, vmin=%f, vmax=%f", np.nanmin(data), np.nanmax(data), vmin, vmax)
            cbar = ax1.imshow(data, cmap='Greys_r', vmin=vmin, vmax=vmax)
            ax1.scatter(xcoords, ycoords, s=30, marker='o', edgecolor='r', facecolor='none')
            plt.colorbar(cbar)
            for i in xrange(3):
                for j in xrange(3):
                    ax_i = fig.add_subplot(gs[0+i,3+j])
                    xsize = 50
                    ysize = 50
                    xinit = int((i+0.5)*np.floor(data.shape[0]/3))-xsize/2
                    yinit = int((j+0.5)*np.floor(data.shape[1]/3))-ysize/2
                    logger.debug("i=%d, j= %d, xinit = %d, yinit = %d", i, j, xinit, yinit)
                    ax_i.imshow(data[xinit:xinit+xsize, yinit:yinit+ysize], cmap='Greys_r', vmin=vmin, vmax=vmax)
                    ax_i.scatter(xcoords-yinit-0.5, ycoords-xinit-0.5, s=30, marker='o', edgecolor='r', facecolor='none')
                    
                    ax_i.set_xlim([0,xsize])
                    ax_i.set_ylim([0,ysize])
            plt.subplots_adjust(top=0.96, bottom=0.06, hspace=0.1, left=0.125, right=0.98) 
            if options.plot_to_file:
                plt.savefig("fistar-sampler.png")
            else:
                plt.show()
    elif 'astrometry' in args:
        extractor = Fistar(cfg)
        starfile = outdir+extractor.get_outfile(indir+infile)
        starlist = Starlist(starfile, colx=2, coly=3, colmag=9)
        catalog = Catalog(cfg)
        catalog.query(maglim=12)
        solver = Anet(cfg)
        solver.cfg = cfg
        solver(starlist)
        logger.debug("Anet solved")
        xylist = os.path.basename(os.path.splitext(infile)[0]) + '.testxyls'
        solver.proj_sky_to_xy(xylist)
        from patools.util.dataio import readcolumn
        import numpy as np
        xyfile = xylist
        xstar = []; readcolumn(xstar, 5, xyfile); xstar=np.array(xstar)
        ystar = []; readcolumn(ystar, 6, xyfile); ystar=np.array(ystar)
        import astropy
        from astropy.io import fits
        with fits.open(indir+infile) as hdulist:
            fig = plt.figure(figsize=[20,20])
            if len(hdulist) == 3:
                data = hdulist[1].data
            if len(hdulist) == 1:
                data = hdulist[0].data


            nrow=3
            ncol=6
            gs = gridspec.GridSpec(nrow, ncol)
            ax1 = fig.add_subplot(gs[0:3, 0:3])
            if len(hdulist) == 3:
                data = hdulist[1].data
            if len(hdulist) == 1:
                data = hdulist[0].data

            vmin, vmax = zscale(data) 
            logger.debug("min=%f, max=%f, vmin=%f, vmax=%f", np.nanmin(data), np.nanmax(data), vmin, vmax)
            cbar = ax1.imshow(data, cmap='Greys_r', vmin=vmin, vmax=vmax)
            ax1.scatter(xstar, ystar, s=30, marker='o', edgecolor='r', facecolor='none')
            plt.colorbar(cbar)
           
            #cbar = ax1.imshow(data, cmap='Greys_r', vmin=vmin, vmax=vmax)
            #ax1.scatter(xcoords, ycoords, s=30, marker='o', edgecolor='r', facecolor='none')
            #plt.colorbar(cbar)
            for i in xrange(3):
                for j in xrange(3):
                    ax_i = fig.add_subplot(gs[0+i,3+j])
                    xsize = 50
                    ysize = 50
                    xinit = int((i+0.5)*np.floor(data.shape[0]/3))-xsize/2
                    yinit = int((j+0.5)*np.floor(data.shape[1]/3))-ysize/2
                    logger.debug("i=%d, j= %d, xinit = %d, yinit = %d", i, j, xinit, yinit)
                    ax_i.imshow(data[xinit:xinit+xsize, yinit:yinit+ysize], cmap='Greys_r', vmin=vmin, vmax=vmax)
                    #ax_i.scatter(xcoords-yinit-0.5, ycoords-xinit-0.5, s=30, marker='o', edgecolor='r', facecolor='none')
                    ax_i.scatter(xstar-yinit-0.5, ystar-xinit-0.5, s=100, marker='o', edgecolor='b', facecolor='none')
                    ax_i.set_xlim([0,xsize])
                    ax_i.set_ylim([0,ysize])
            plt.subplots_adjust(top=0.96, bottom=0.06, hspace=0.1, left=0.125, right=0.98)  
            if options.plot_to_file:
                plt.savefig("astrometry-sampler.png")
            else:
                plt.show()






    elif 'phot' in args:
        catalog = Catalog(cfg)
        catalog.query(maglim=14)
        solver = Anet(cfg)
        solver.cfg = cfg
        xylist = os.path.basename(os.path.splitext(infile)[0]) + '.testxyls'
        solver.proj_sky_to_xy(xylist)

        catproj = Starlist(xylist)
        fiphot = Fiphot(cfg)
        fiphot(indir+infile, catproj, outdir=outdir)
        photfile = outdir+fiphot.getphotfile(indir+infile)
        from patools.util.dataio import readcolumn
        import numpy as np
        xstar = []; readcolumn(xstar, 3, photfile); xstar=np.array(xstar)
        ystar = []; readcolumn(ystar, 4, photfile); ystar=np.array(ystar)
     
        import pyfits as pyf
        with pyf.open(indir+infile) as hdulist:
            fig = plt.figure(figsize=[20,20])
            if len(hdulist) == 3:
                data = hdulist[1].data
            if len(hdulist) == 1:
                data = hdulist[0].data

            nrow=3
            ncol=6
            gs = gridspec.GridSpec(nrow, ncol)
            ax1 = fig.add_subplot(gs[0:3, 0:3])
            
            vmin, vmax = zscale(data) 
            cbar = ax1.imshow(data, cmap='Greys_r', vmin=vmin, vmax=vmax)
            ax1.scatter(xstar, ystar, s=30, marker='o', edgecolor='r', facecolor='none')
            plt.colorbar(cbar)

            logger.debug("min=%f, max=%f, vmin=%f, vmax=%f", np.nanmin(data), np.nanmax(data), vmin, vmax)
            
            #cbar = ax1.imshow(data, cmap='Greys_r', vmin=vmin, vmax=vmax)
            #ax1.scatter(xcoords, ycoords, s=30, marker='o', edgecolor='r', facecolor='none')
            #plt.colorbar(cbar)
            for i in xrange(3):
                for j in xrange(3):
                    ax_i = fig.add_subplot(gs[0+i,3+j])
                    xsize = 50
                    ysize = 50
                    xinit = int((i+0.5)*np.floor(data.shape[0]/3))-xsize/2
                    yinit = int((j+0.5)*np.floor(data.shape[1]/3))-ysize/2
                    logger.debug("i=%d, j= %d, xinit = %d, yinit = %d", i, j, xinit, yinit)
                    ax_i.imshow(data[xinit:xinit+xsize, yinit:yinit+ysize], cmap='Greys_r', vmin=vmin, vmax=vmax)
                    ax_i.scatter(xstar-yinit-0.5, ystar-xinit-0.5, s=100, marker='o', edgecolor='b', facecolor='none')
                    ax_i.set_xlim([0,xsize])
                    ax_i.set_ylim([0,ysize])
            plt.subplots_adjust(top=0.96, bottom=0.06, hspace=0.1, left=0.125, right=0.98)  
            if options.plot_to_file:
                plt.savefig("fiphot-sampler.png")
            else:
                plt.show()


    else:
        print "nothing specified"

